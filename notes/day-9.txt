JavaScript:
1. object-based programming language
2. loosely-typed language
3. dynamic language 


When an HTML file is loaded in the browser window, series of objects representing each and every tag are created in the browser runtime process. this tree of objects is known as Document Object Model (for HTML) or in short, DOM.

chrome and chrome-kit browsers: V8 (open source)
firefox: spidermonkey
safari: JS Core

JS basics:
1. data types
	string, number, bool, function, object
	NaN, undefined, null, Infinity, var etc. => keywords
2. control flow statements
3. operators


whenever a function is called/invoked, an objecr is created in JS untime: Function Execution Context Object (FEC)

function-name() => this will be connected to global/window
ref-var.function-name() => this will be connected to the 'ref-var'
new function-name() => this will be connected to a new object


JS execution:
step-1: preparation stage
	JS engine looks for variable and function declaration and hoist them
	note: function expression is not hoisted

step-2: executaion stage
	JS engine takes care of assignment and invocations

a. data typification
b. static type-checking

transpiler:
JS => 
	ES6+ JS code => Vanilla JS code (JS with <ES6)
	transpiler: babel

TS => 
	ES6+ TS code => Vanilla JS code (JS with <ES6)
	transpiler: typescript compiler (tsc)

Node JS: c:\program files\nodejs

donwload and install any package:
package managers:

Node Package Manager (NPM => automatically shipped with Node JS)
bower, yarn, pnpm etc,

install any package:
a. globally: >npm install/i <package-name> --location=global

global installation path:
C:\Users\<user-name>\AppData\Roaming\npm

b. local installation (application specific)

i. development level dependency
app-dir>npm install/i <package-name> -D
or (depricated)
app-dir>npm install/i <package-name> --save-dev

ii. complete (dev+prod level dependency)
app-dir>npm install/i <package-name>
or (depricated)
app-dir>npm install/i <package-name> --save

dependency lists:
package.json

a. manual creation
b. command: >npm init 
or >npm init --yes


tsconfig.json
>.\node_modules\.bin\tsc --init









